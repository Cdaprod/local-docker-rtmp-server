# Create service directory structure
mkdir -p services/metadata-finalizer

# --------------------------------------------
# services/metadata-finalizer/Dockerfile
# --------------------------------------------
sudo tee services/metadata-finalizer/Dockerfile > /dev/null << 'EOF'
# ==============================================================================
# CDA Metadata Finalizer Service
#
# Generates standardized thumbnails and metadata JSON from video inputs.
#
# Supported Inputs:
#  - Local filesystem path (mounted volumes)
#  - Remote HTTP/HTTPS URLs (auto-downloaded internally)
#  - stdin (pipe directly into container)
#
# Outputs:
#  - Thumbnail (.jpg at 5 seconds)
#  - Metadata (.json with SHA256 hash and descriptive metadata)
#
# Base image: slim Python + ffmpeg
# ==============================================================================
FROM python:3.12-slim

LABEL maintainer="David Cannan <Cdaprod@Cdaprod.dev>" \
      description="Metadata Finalizer for CDA cinematic pipeline"

ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies (ffmpeg for thumbnailing, curl for robust download handling)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg curl \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy and prepare the finalization script
COPY finalize.py /app/finalize.py
RUN chmod +x /app/finalize.py

ENTRYPOINT ["python3", "/app/finalize.py"]
EOF

# --------------------------------------------
# services/metadata-finalizer/finalize.py
# --------------------------------------------
sudo tee services/metadata-finalizer/finalize.py > /dev/null << 'EOF'
#!/usr/bin/env python3
"""
CDA Metadata Finalizer
-----------------------
Accepts input video from local file, URL, or stdin, then generates:
  - JPEG thumbnail at 5 seconds
  - JSON metadata (SHA256 hash, title, description, tags)

Invocation:
  ./finalize.py <input_path | input_url | ->

Example usages inside Docker:
  docker run --rm -v "$(pwd)":/data cdaprod/metadata-finalizer:latest /data/video.mp4
  docker run --rm -v "$(pwd)":/data cdaprod/metadata-finalizer:latest "https://example.com/video.mp4"
  cat video.mp4 | docker run -i --rm -v "$(pwd)":/data cdaprod/metadata-finalizer:latest -
"""

import sys
import os
import json
import subprocess
import hashlib
import shutil
import urllib.request
import tempfile
from datetime import datetime

def get_video(src):
    if src == '-':
        print("[INFO] Reading video data from stdin...")
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
        shutil.copyfileobj(sys.stdin.buffer, tmp)
        tmp.close()
        return tmp.name, True

    elif src.startswith(('http://', 'https://')):
        print(f"[INFO] Downloading video from URL: {src}")
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
        try:
            with urllib.request.urlopen(src) as response, open(tmp.name, 'wb') as out_file:
                shutil.copyfileobj(response, out_file)
        except Exception as e:
            print(f"[ERROR] Failed to download URL: {e}")
            sys.exit(1)
        return tmp.name, True

    elif os.path.exists(src):
        print(f"[INFO] Using local file: {src}")
        return src, False

    else:
        print(f"[ERROR] Invalid source specified: {src}")
        sys.exit(1)

def generate_thumbnail(video_path, output_path, timestamp="00:00:05"):
    cmd = [
        'ffmpeg', '-y', '-i', video_path,
        '-ss', timestamp, '-frames:v', '1', output_path
    ]
    subprocess.run(cmd, check=True)
    print(f"[INFO] Thumbnail created at {output_path}")

def calculate_sha256(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            sha256_hash.update(chunk)
    return sha256_hash.hexdigest()

def create_metadata(video_path, thumb_path):
    base = os.path.basename(video_path)
    metadata = {
        "video_filename": base,
        "thumbnail_filename": os.path.basename(thumb_path),
        "sha256_hash": calculate_sha256(video_path),
        "generated_by": "CDA Metadata Finalizer",
        "generated_at": datetime.utcnow().isoformat() + "Z",
        "title": f"CDA Artifact: {os.path.splitext(base)[0]}",
        "description": "This metadata and thumbnail were automatically generated by the CDA cinematic pipeline.",
        "tags": ["CDAProd", "AI", "Metadata", "Automated"]
    }
    meta_path = os.path.join(os.path.dirname(video_path), f"{os.path.splitext(base)[0]}_metadata.json")
    with open(meta_path, 'w') as meta_file:
        json.dump(metadata, meta_file, indent=4)
    print(f"[INFO] Metadata JSON created at {meta_path}")

def main():
    if len(sys.argv) != 2:
        print("Usage: finalize.py <input_video_path|URL|->", file=sys.stderr)
        sys.exit(1)

    source = sys.argv[1]
    video_path, is_temp = get_video(source)

    thumb_path = os.path.splitext(video_path)[0] + "_thumb.jpg"

    try:
        generate_thumbnail(video_path, thumb_path)
        create_metadata(video_path, thumb_path)
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Thumbnail creation failed: {e}")
        sys.exit(1)
    finally:
        if is_temp:
            os.unlink(video_path)  # Cleanup temp files
            print(f"[INFO] Temporary file {video_path} removed.")

if __name__ == "__main__":
    main()
EOF

# --------------------------------------------
# Permissions and Completion Message
# --------------------------------------------
sudo chmod +x services/metadata-finalizer/finalize.py

echo -e "\nâœ… \033[32mMetadata Finalizer service setup completed successfully.\033[0m"
echo -e "ðŸ‘‰ \033[34mBuild the container:\033[0m"
echo -e "  docker build -t cdaprod/metadata-finalizer:latest services/metadata-finalizer\n"
echo -e "ðŸ‘‰ \033[34mRun examples:\033[0m"
echo "  â€¢ Local file: docker run --rm -v \"\$(pwd)\":/data cdaprod/metadata-finalizer:latest /data/video.mp4"
echo "  â€¢ Remote URL: docker run --rm -v \"\$(pwd)\":/data cdaprod/metadata-finalizer:latest \"https://example.com/video.mp4\""
echo "  â€¢ stdin stream: cat video.mp4 | docker run -i --rm -v \"\$(pwd)\":/data cdaprod/metadata-finalizer:latest -"