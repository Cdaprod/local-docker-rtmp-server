name: CI-Build-and-Publish

on:
  push:
    branches: [ "**" ]
    tags: [ "**" ]
    paths: 
      - "services/*/**"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      DOCKERHUB_USERNAME: cdaprod
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DRY_RUN: false  # Set to 'true' to disable pushing, tagging, and uploading to dockerhub and ghcr.io registries

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          configFilePath: './.github/GitVersion.yml'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        if: env.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Log in to GHCR
        if: env.GHCR_TOKEN != ''
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Discover and build services
        run: |
          set +e

          VERSION=${{ steps.gitversion.outputs.SemVer }}
          SHORT_SHA=${GITHUB_SHA:0:7}
          
          DRY_RUN=${DRY_RUN:-false}
          if [[ -z "$DOCKERHUB_TOKEN" || "$DRY_RUN" == "true" ]]; then
            DRY_RUN=true
            echo "⚠️  Dry-run mode enabled (no push/tag/release)"
          else
            DRY_RUN=false
          fi
          
          echo "" > build_report.txt
          echo "========= BUILD REPORT =========" >> build_report.txt

          declare -A BUILD_STATUS

          for dir in services/*; do
            # 1. Skip disabled dirs
            [[ "$dir" == *".disabled"* ]] && {
              echo "⚠️  Skipping disabled directory: $dir"
              continue
            }
            # 2. Must be a directory
            [ ! -d "$dir" ] && {
              echo "⚠️  Skipping non-directory: $dir"
              continue
            }
            # 3. Must have a Dockerfile
            DOCKERFILE="$dir/Dockerfile"
            [ ! -f "$DOCKERFILE" ] && {
              echo "⚠️  Skipping missing Dockerfile in: $dir"
              continue
            }

            # 4. Normalize service name to lowercase
            NAME=$(basename "$dir")
            NAME=${NAME,,}

            echo "::group::Building service '$NAME'"

            # 5. Detect duplicate version tag; if exists, fallback to SHORT_SHA suffix
            TAG="$VERSION"
            if ! $DRY_RUN; then
              for REG in "docker.io/${DOCKERHUB_USERNAME}/$NAME" "ghcr.io/${DOCKERHUB_USERNAME}/$NAME"; do
                if docker manifest inspect ${REG}:$TAG >/dev/null 2>&1; then
                  FALLBACK="${VERSION}-${SHORT_SHA}"
                  echo "⚠️  Version tag $TAG exists in $REG, using fallback tag $FALLBACK"
                  TAG="$FALLBACK"
                  break
                fi
              done
            fi

            # 6. Build (and push unless dry-run)
            BUILD_CMD="docker buildx build $dir \
              --platform linux/amd64,linux/arm64 \
              --tag docker.io/${DOCKERHUB_USERNAME}/$NAME:$TAG \
              --tag docker.io/${DOCKERHUB_USERNAME}/$NAME:latest \
              --tag ghcr.io/${DOCKERHUB_USERNAME}/$NAME:$TAG \
              --tag ghcr.io/${DOCKERHUB_USERNAME}/$NAME:latest"

            if ! $DRY_RUN; then
              BUILD_CMD="$BUILD_CMD --push"
            else
              BUILD_CMD="$BUILD_CMD"
            fi

            # Execute build
            eval "$BUILD_CMD"
            if [ $? -eq 0 ]; then
              BUILD_STATUS[$NAME]="✅ Success"
            else
              echo "❌ Build failed for $NAME"
              BUILD_STATUS[$NAME]="❌ Failed"
            fi

            echo "::endgroup::"
          done

          echo "" >> build_report.txt
          for service in "${!BUILD_STATUS[@]}"; do
            echo "${service}: ${BUILD_STATUS[$service]}" | tee -a build_report.txt
          done
          echo "================================" >> build_report.txt
          cat build_report.txt

          # Summary only--do NOT exit with error
          echo "⚠️  Build step complete. Check individual statuses above and in build_report.txt."

      - name: Upload Build Report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build_report.txt

      - name: Create Git Tag and Release
        if: github.ref_type != 'tag'
        run: |
          TAG=${{ steps.gitversion.outputs.SemVer }}
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"