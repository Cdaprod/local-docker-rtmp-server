# metadata-service/app/services/finalizer.py

import os
import subprocess
import hashlib
import shutil
import urllib.request
import tempfile
from datetime import datetime
from typing import Tuple, Dict

def download_video(src: str) -> Tuple[str, bool]:
    """Prepare or download the video; returns (path, is_temp_file)."""
    if src.startswith(("http://", "https://")):
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
        with urllib.request.urlopen(src) as resp, open(tmp.name, "wb") as out:
            shutil.copyfileobj(resp, out)
        return tmp.name, True
    elif os.path.exists(src):
        return src, False
    else:
        raise ValueError(f"Cannot access source: {src}")

def generate_thumbnail(video_path: str, output_path: str, timestamp: str = "00:00:05"):
    subprocess.run([
        "ffmpeg", "-y", "-i", video_path,
        "-ss", timestamp, "-frames:v", "1", output_path
    ], check=True)

def calculate_sha256(path: str) -> str:
    h = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()

def create_metadata(video_path: str, thumb_path: str) -> Dict:
    base = os.path.basename(video_path)
    return {
        "video_filename": base,
        "thumbnail_filename": os.path.basename(thumb_path),
        "sha256_hash": calculate_sha256(video_path),
        "generated_by": "CDA Metadata Finalizer",
        "generated_at": datetime.utcnow().isoformat() + "Z",
        "title": f"CDA Artifact: {os.path.splitext(base)[0]}",
        "description": "Automatically generated by CDA pipeline",
        "tags": ["CDAProd", "AI", "Metadata", "Automated"]
    }

def finalize_video(source: str) -> Tuple[str, Dict]:
    """
    Given a source (URL or path), produce a thumbnail JPG and metadata dict.
    Returns (thumb_path, metadata_dict).
    """
    video_path, is_temp = download_video(source)
    thumb_path = os.path.splitext(video_path)[0] + "_thumb.jpg"
    try:
        generate_thumbnail(video_path, thumb_path)
        metadata = create_metadata(video_path, thumb_path)
        return thumb_path, metadata
    finally:
        if is_temp:
            os.unlink(video_path)